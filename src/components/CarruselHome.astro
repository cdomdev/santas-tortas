---
const items = [
  {
    image: "/img1.webp",
    title: "ChocoChip Delicia",
    text: " Pastel de chocolate intenso y húmedo, salpicado de chispas de chocolate que se derriten en cada bocado. Perfecto para los amantes del chocolate.",
    urlBtn: "/carrito-compras",
    thumbnail: {
      image: "/imgthum4.webp",
    },
  },
  {
    image: "/img2.webp",
    title: "Tres Leches Frutal",
    text: "Tradicional pastel de tres leches, bañado en una mezcla dulce y cremosa, coronado con crema batida y fresas frescas. Una experiencia fresca y decadente.",
    urlBtn: "/carrito-compras",
    thumbnail: {
      image: "/imgthum1.webp",
    },
  },
  {
    image: "/img3.webp",
    title: "Dulce Encanto de Vainilla",
    text: " Delicioso pastel de vainilla suave y esponjoso, cubierto con crema batida y decorado con frescas. Un clásico irresistible para cualquier ocasión especial.",
    urlBtn: "/carrito-compras",
    thumbnail: {
      image: "/imgthum2.webp",
    },
  },
  {
    image: "/img4.webp",
    title: "Sueño de Chocolate y Crema",
    text: "Pastel de chocolate rico y esponjoso, con un suave relleno de crema batida, decorado con una mezcla de cacao en polvo y toques de crema para un acabado elegante y delicioso.",
    urlBtn: "/carrito-compras",
    thumbnail: {
      image: "/imgthum3.webp",
    },
  },
];
---

<div class="carousel h-dvh w-screen overflow-hidden relative z-10">
  <div class="list">
    {
      items.map((item) => (
        <div class="item size-full absolute inset-0">
          <img
            src={item.image}
            class="size-full object-cover "
            alt="image-carrusel"
            loading="lazy"
          />
          <div class="content absolute top-24 md:top-1/4 w-full md:w-2/5 -right-10 md:right-1/2 p-5 ml-1 md:m-0 md:p-7 -translate-x-10 md:-translate-x-12 box-border text-black bg-[#f8f3f3]">
            <div class="tittle font-bold tracking-tight text-2xl md:text-4xl mt-2 uppercase">
              {item.title}
            </div>
            <div class="des text-sm md:text-base my-3 md:my-7">{item.text}</div>
            <div class="buttons grid place-content-center p-4 grid-cols-2 grid-rows-1 gap-4 w-full bg-[#ffffff] mt-7 mx-auto">
              <button class="border-none text-balance text-xs md:text-base  font-medium px-3 py-2 bg-[#f1683a] transition ease-linear text-white duration-150 hover:bg-[#c94c23]  ">
                ver detalles
              </button>
              <button class="font-medium text-balance text-xs md:text-base px-3 py-2 bg-white border border-black transition ease-linear text-black duration-150 hover:bg-[#c94c23] hover:text-white ">
               ver mas
              </button>
            </div>
          </div>
        </div>
      ))
    }
  </div>

  <div
    class="thumbnail absolute bottom-12 left-1/3 md:left-2/4 w-max z-10 flex gap-4"
  >
    {
      items.map((item) => (
        <div class="item w-32 md:w-36 h-44 md:h-48 flex-shrink-0 relative">
          <img
            src={item.thumbnail.image}
            alt="image-carrusel-thumnail"
            class="size-full object-cover rounded-2xl"
          />
        </div>
      ))
    }
  </div>

  <!-- controls -->
  <div
    class="arrows absolute top-3/4 right-2/3 z-10 w-80 justify-center flex gap-3 max-w-[30%] p-5 items-center my-7"
  >
    <button
      id="prev"
      class="grid place-content-center size-9 md:size-14 rounded-full border-none bg-[#8f8e8e] text-white font-bold transition duration-150 hover:bg-white hover:text-black"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-linecap="round"
        stroke-linejoin="round"
        width="24"
        height="24"
        stroke-width="2"
      >
        <path d="M15 6l-6 6l6 6"></path>
      </svg>
    </button>
    <button
      id="next"
      class="grid place-content-center size-9 md:size-14 rounded-full border-none bg-[#8f8e8e] text-white font-bold transition duration-150 hover:bg-white hover:text-black"
      ><svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-linecap="round"
        stroke-linejoin="round"
        width="24"
        height="24"
        stroke-width="2"
      >
        <path d="M9 6l6 6l-6 6"></path>
      </svg></button
    >
  </div>
</div>

<style>
  /* animation */
  .carousel .list .item:nth-child(1) {
    z-index: 1;
  }

  /* animation text in first item */

  .carousel .list .item:nth-child(1) .content .tittle,
  .carousel .list .item:nth-child(1) .content .tittle,
  .carousel .list .item:nth-child(1) .content .des,
  .carousel .list .item:nth-child(1) .content .buttons {
    transform: translateY(50px);
    filter: blur(20px);
    opacity: 0;
    animation: showContent 0.5s 1s linear 1 forwards;
  }
  @keyframes showContent {
    to {
      transform: translateY(0px);
      filter: blur(0px);
      opacity: 1;
    }
  }

  .carousel .list .item:nth-child(1) .content .buttons {
    animation-delay: 1.8s;
  }

  /* create animation when next click */
  .carousel.next .list .item:nth-child(1) img {
    width: 150px;
    height: 220px;
    position: absolute;
    bottom: 50px;
    left: 50%;
    border-radius: 30px;
    animation: showImage 0.5s linear 1 forwards;
  }
  @keyframes showImage {
    to {
      bottom: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border-radius: 0;
    }
  }

  .carousel.next .thumbnail .item:nth-last-child(1) {
    overflow: hidden;
    animation: showThumbnail 0.5s linear 1 forwards;
  }
  .carousel.prev .list .item img {
    z-index: 100;
  }
  @keyframes showThumbnail {
    from {
      width: 0;
      opacity: 0;
    }
  }
  .carousel.next .thumbnail {
    animation: effectNext 0.5s linear 1 forwards;
  }

  @keyframes effectNext {
    from {
      transform: translateX(150px);
    }
  }

  /* prev click */

  .carousel.prev .list .item:nth-child(2) {
    z-index: 2;
  }

  .carousel.prev .list .item:nth-child(2) img {
    animation: outFrame 0.5s linear 1 forwards;
    position: absolute;
    bottom: 0;
    left: 0;
  }
  @keyframes outFrame {
    to {
      width: 150px;
      height: 220px;
      bottom: 50px;
      left: 50%;
      border-radius: 20px;
    }
  }

  .carousel.prev .thumbnail .item:nth-child(1) {
    overflow: hidden;
    opacity: 0;
    animation: showThumbnail 0.5s linear 1 forwards;
  }
  .carousel.next .arrows button,
  .carousel.prev .arrows button {
    pointer-events: none;
  }
  .carousel.prev .list .item:nth-child(2) .content .tittle,
  .carousel.prev .list .item:nth-child(2) .content .tittle,
  .carousel.prev .list .item:nth-child(2) .content .des,
  .carousel.prev .list .item:nth-child(2) .content .buttons {
    animation: contentOut 1.5s linear 1 forwards !important;
  }

  @keyframes contentOut {
    to {
      transform: translateY(-150px);
      filter: blur(10px);
      opacity: 0;
    }
  }

</style>

<script>
  if (typeof window !== "undefined") {
    const nextDom = document.getElementById("next");
    const prevDom = document.getElementById("prev");

    const carouselDom = document.querySelector(".carousel");
    const SliderDom = carouselDom?.querySelector(".list");
    const thumbnailBorderDom = carouselDom?.querySelector(".thumbnail");
    const thumbnailItemsDom = thumbnailBorderDom?.querySelectorAll(".item");

    if (
      nextDom &&
      prevDom &&
      carouselDom &&
      SliderDom &&
      thumbnailBorderDom &&
      thumbnailItemsDom?.length
    ) {
      thumbnailBorderDom.appendChild(thumbnailItemsDom[0]);

      nextDom.onclick = () => showSlider("next");
      prevDom.onclick = () => showSlider("prev");

      let runTimeOut = 0;

      let runNextAuto = setTimeout(() => {
        nextDom.click();
      }, 9000);

      function showSlider(type: any) {
        const SliderItemsDom = SliderDom?.querySelectorAll(".item");
        const thumbnailItemsDom = thumbnailBorderDom?.querySelectorAll(".item");

        if (!SliderItemsDom?.length || !thumbnailItemsDom?.length) return;

        if (type === "next") {
          SliderDom?.appendChild(SliderItemsDom[0]);
          // Mueve el primer item al final
          thumbnailBorderDom?.appendChild(thumbnailItemsDom[0]);
        } else {
          SliderDom?.prepend(SliderItemsDom[SliderItemsDom.length - 2]);
          // Mueve el último al inicio
          thumbnailBorderDom?.prepend(
            thumbnailItemsDom[thumbnailItemsDom.length - 1]
          );
        }

        carouselDom?.classList.add(type);
        clearTimeout(runTimeOut);
        runTimeOut = setTimeout(() => {
          carouselDom?.classList.remove("next");
          carouselDom?.classList.remove("prev");
        }, 1000);

        clearTimeout(runNextAuto);
        runNextAuto = setTimeout(() => {
          nextDom?.click();
        }, 9000);
      }
    }
  }
</script>
